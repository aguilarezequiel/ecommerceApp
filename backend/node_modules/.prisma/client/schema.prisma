// backend/prisma/schema.prisma - VERSIÓN ACTUALIZADA
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  phoneNumber String? // NUEVO CAMPO
  role        Role     @default(CUSTOMER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders Order[]
  cart   CartItem[]

  @@map("users")
}

enum Role {
  CUSTOMER
  ADMIN
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text
  iconUrl     String?
  iconName    String? // Para iconos de lucide-react
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  price       Decimal  @db.Decimal(10, 2)
  stock       Int
  imageUrl    String?
  category    String // Mantenemos para retrocompatibilidad
  categoryId  String? // NUEVO CAMPO para relación con Category
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryRelation Category?   @relation(fields: [categoryId], references: [id])
  cartItems        CartItem[]
  orderItems       OrderItem[]

  @@map("products")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  total         Decimal     @db.Decimal(10, 2)
  status        OrderStatus @default(PENDING)
  trackingCode  String?     @unique
  shippingAddr  String
  customerEmail String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model AppSettings {
  id               String   @id @default(cuid())
  adminPhoneNumber String
  whatsappMessage  String?  @default("Hola, me gustaría hacer una consulta sobre ShopApp")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("app_settings")
}
